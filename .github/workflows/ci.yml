name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      publish_packages:
        description: 'Publish packages to NuGet'
        required: true
        default: false
        type: boolean
      package_source:
        description: 'Source of packages to publish'
        required: true
        default: 'release'
        type: choice
        options:
        - release
        - develop

env:
  DOTNET_VERSION: 8.0.x
  TEST_CONFIGURATION: Debug
  CONFIGURATION: Release

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Allow pushing changes back to repository
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Install coverage collector
      run: dotnet add BlitzCache.Tests/BlitzCacheCore.Tests.csproj package coverlet.collector

    - name: Build solution (Debug for tests)
      run: dotnet build --configuration ${{ env.TEST_CONFIGURATION }} --no-restore

    - name: Run tests
      run: |
        dotnet test --configuration ${{ env.TEST_CONFIGURATION }} --no-build --verbosity normal --collect:"XPlat Code Coverage" --logger:"junit;LogFilePath=TestResults/junit.xml" --results-directory ./TestResults
        echo "=== Test Results Structure ==="
        find ./TestResults -type f -ls || echo "No files in TestResults"

    - name: Upload test results to Codecov
      if: ${{ !cancelled() }}
      uses: codecov/test-results-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./TestResults/junit.xml
      
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: chanido/blitzcache
        
    - name: Update README badges for codecov and tests
      if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop')
      run: |
        CURRENT_BRANCH=${GITHUB_REF#refs/heads/}
        echo "Updating codecov badge for branch: $CURRENT_BRANCH"
        # Update the codecov badge URL to point to current branch
        sed -i "s|https://codecov.io/gh/chanido/blitzcache/branch/[^/]*/graph/badge.svg|https://codecov.io/gh/chanido/blitzcache/branch/$CURRENT_BRANCH/graph/badge.svg|g" README.md

        # Extract test count from junit.xml (first tests attribute found)
        TEST_COUNT=$(grep -oP 'tests="\K[0-9]+' ./TestResults/junit.xml | head -1)
        echo "Test count: $TEST_COUNT"
        if [ -z "$TEST_COUNT" ]; then
          echo "Could not extract test count, skipping badge update."
        else
          # Update the tests badge in README.md
          sed -i "s|https://img.shields.io/badge/tests-[0-9]\+%20passing-brightgreen|https://img.shields.io/badge/tests-${TEST_COUNT}%20passing-brightgreen|g" README.md
        fi

        # Check if there are any changes
        if git diff --quiet README.md; then
          echo "No changes needed to README.md"
        else
          echo "README.md updated with codecov and/or tests badge"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "Update badges: codecov branch and tests count [skip ci]"
          git push
        fi
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: ./TestResults/

  package-dev:
    name: Create Development NuGet Package
    runs-on: ubuntu-latest
    needs: test
    if: (github.event_name == 'push' && github.ref == 'refs/heads/develop') || (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build BlitzCacheCore (Release for packaging)
      run: dotnet build BlitzCache/BlitzCacheCore.csproj --configuration ${{ env.CONFIGURATION }} --no-restore
      


    - name: Get csproj version with run number
      id: version
      run: |
        version=$(grep -oPm1 "(?<=<Version>)[^<]+" BlitzCache/BlitzCacheCore.csproj)
        echo "package_version=${version}-dev-${GITHUB_RUN_NUMBER}" >> $GITHUB_OUTPUT

    - name: Create development NuGet package
      run: dotnet pack BlitzCache/BlitzCacheCore.csproj --configuration ${{ env.CONFIGURATION }} --no-build --include-symbols --output ./packages -p:PackageVersion="${{ steps.version.outputs.package_version }}"
      
    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages-dev
        path: ./packages/*.nupkg

  package:
    name: Create NuGet Package
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore

    - name: Build BlitzCacheCore (Release for packaging)
      run: dotnet build BlitzCache/BlitzCacheCore.csproj --configuration ${{ env.CONFIGURATION }} --no-restore

    - name: Create NuGet package
      run: dotnet pack BlitzCache/BlitzCacheCore.csproj --configuration ${{ env.CONFIGURATION }} --no-build --include-symbols --output ./packages
      
    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages-release
        path: ./packages/*.nupkg


  publish-packages-release:
    name: Publish NuGet Packages (Release)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && inputs.publish_packages == true && github.ref == 'refs/heads/master'
    needs: package
    steps:
    - name: Download packages
      uses: actions/download-artifact@v4
      with:
        name: nuget-packages-release
        path: ./packages
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: Publish to NuGet
      run: dotnet nuget push ./packages/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
    - name: Publish summary
      run: |
        echo "## NuGet Package Publication Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Source**: release" >> $GITHUB_STEP_SUMMARY
        echo "- **Packages**: $(ls -1 ./packages/*.nupkg | wc -l) package(s)" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: Published successfully" >> $GITHUB_STEP_SUMMARY

  publish-packages-dev:
    name: Publish NuGet Packages (Dev)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && inputs.publish_packages == true && github.ref == 'refs/heads/develop'
    needs: package-dev
    steps:
    - name: Download packages
      uses: actions/download-artifact@v4
      with:
        name: nuget-packages-dev
        path: ./packages
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: Publish to NuGet
      run: dotnet nuget push ./packages/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
    - name: Publish summary
      run: |
        echo "## NuGet Package Publication Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Source**: develop" >> $GITHUB_STEP_SUMMARY
        echo "- **Packages**: $(ls -1 ./packages/*.nupkg | wc -l) package(s)" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: Published successfully" >> $GITHUB_STEP_SUMMARY

  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Run security analysis
      run: |
        dotnet list package --vulnerable --include-transitive 2>&1 | tee security-report.txt
        if grep -q "has the following vulnerable packages" security-report.txt; then
          echo "Vulnerable packages found!"
          cat security-report.txt
          exit 1
        else
          echo "No vulnerable packages found."
        fi
