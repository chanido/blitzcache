<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.1</TargetFramework>
    <!-- Only generate NuGet package during Release builds -->
    <GeneratePackageOnBuild Condition="'$(Configuration)'=='Release'">true</GeneratePackageOnBuild>
    <PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>
    <Nullable>enable</Nullable>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <Authors>The BlitzCache Group</Authors>
    <Description>Enterprise-grade caching that's ridiculously simple to use. One line of code prevents duplicate execution of expensive operations. Ultra-fast, thread-safe, and prevents server crashes from concurrent query bursts. Zero configuration required. Targets .NET Standard 2.1 - compatible with .NET Core 3.1+, .NET 5-8+.</Description>
    <PackageProjectUrl>https://github.com/chanido/blitzcache</PackageProjectUrl>
    <RepositoryUrl>https://github.com/chanido/blitzcache</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <RepositoryBranch>master</RepositoryBranch>
    <PackageValidationBaselineVersion>1.0.0</PackageValidationBaselineVersion>
    <PackageTags>caching;performance;threading;async;concurrency;enterprise;dotnet;thundering-herd;duplicate-prevention;memory-cache;thread-safe;zero-configuration;blazing-fast;production-ready;sql-protection;cache-invalidation;logging;monitoring;statistics;microservices</PackageTags>
  <Version>2.1.1</Version>
  <AssemblyVersion>2.1.1.0</AssemblyVersion>
  <FileVersion>2.1.1.0</FileVersion>
  <PackageReleaseNotes>BlitzCache v2.1.1 - Zero-Overhead Conditional Features

NEW IN v2.1.1:
• Conditional statistics: When maxTopSlowest or maxTopHeaviest &lt; 1 the related tracking is fully disabled (no allocations / updates).
• Automatic skip of per-entry size calculation &amp; capacity enforcement when no maxCacheSizeBytes configured.
• Deterministic capacity enforcement using simulated remaining bytes to avoid transient over-eviction.
• Logger now omits disabled Top sections entirely for cleaner output.
• Additional tests covering disabled tracking &amp; eviction precision.

Notes:
• Performance-focused release with no breaking changes.
• Disabling features now truly removes their runtime cost.</PackageReleaseNotes>
    <PackageId>BlitzCache</PackageId>
    <PackageIcon>icon.png</PackageIcon>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
  </PropertyGroup>

  <ItemGroup>
    <AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleTo">
      <_Parameter1>BlitzCacheCore.Tests</_Parameter1>
    </AssemblyAttribute>
    <AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleTo">
      <_Parameter1>DynamicProxyGenAssembly2, PublicKey=0024000004800000940000000602000000240000525341310004000001000100c547cac37abd99c8db225ef2f6c8a3602f3b3606cc9891605d02baa56104f4cfc0734aa39b93bf7852f7d9266654753cc297e7d2edfe0bac1cdcf9f717241550e0a7b191195b7667bb4f64bcb8e2121380fd1d9d46ad2d92d2d15605093924cceaf74c4861eff62abf69b9291ed0a340e113be11e6a7d3113e92484cf7045cc7</_Parameter1>
    </AssemblyAttribute>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Extensions.Caching.Memory" Version="8.0.1" />
    <PackageReference Include="Microsoft.Extensions.DependencyInjection.Abstractions" Version="8.0.2" />
    <PackageReference Include="Microsoft.Extensions.Hosting.Abstractions" Version="8.0.1" />
    <PackageReference Include="Microsoft.Extensions.Logging.Abstractions" Version="8.0.2" />
  </ItemGroup>

  <ItemGroup>
    <None Include="..\README.md" Pack="true" PackagePath="\" />
    <None Include="..\licence.txt" Pack="true" PackagePath="\" />
    <!-- Only include the icon if it exists to prevent NU5019 in non-pack builds -->
    <None Include="icon.png" Pack="true" PackagePath="\" Condition="Exists('$(MSBuildProjectDirectory)/icon.png')" />
  </ItemGroup>

  <!-- Copy icon early so it exists for both build and pack; keep legacy Pack-time copy as safety -->
  <Target Name="CopyIconEarly" BeforeTargets="PrepareForBuild">
    <Copy SourceFiles="$(MSBuildProjectDirectory)/../icon.png" DestinationFiles="$(MSBuildProjectDirectory)/icon.png" SkipUnchangedFiles="true" Condition="Exists('$(MSBuildProjectDirectory)/../icon.png')" />
  </Target>
  <Target Name="EnsureIconInProject" BeforeTargets="Pack">
    <Message Text="Ensuring icon.png exists in project directory for packing" Importance="low" />
    <Copy SourceFiles="$(MSBuildProjectDirectory)/../icon.png" DestinationFiles="$(MSBuildProjectDirectory)/icon.png" SkipUnchangedFiles="true" Condition="Exists('$(MSBuildProjectDirectory)/../icon.png')" />
  </Target>
</Project>
